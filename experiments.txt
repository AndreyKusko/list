import time

def my_deco(func):
    qwe =  time.time()

    def wrapper(*args, **kwargs):
    	try:
    	    return func(*args, **kwargs)
        except Exception as e:
		    pass
    print(time.time() - qwe)
	return wrapper


def my_generation(arr):
	for i in arr:
		yield i

qwe = [1,4,2,23,5,6,2,23]

@my_deco
def bubble_sort(list_):
	sort = True
	while sort:
		sort = False
		for index, element in enumerate(list_):
			if index != 0:
				if element < list_[index-1]:
					list_[index], list_[index-1] = list_[index-1], list_[index]
					sort = True
	return list_

print(bubble_sort(qwe))





qwe = [5,4,7,3,8,5,4,2,1,2,3,4,5,8,8,9,9,5,0,0]


def merge(left_list_, right_list_):
    left_coursor, right_coursor = 0, 0
    sorted_list_ = []

    while left_coursor < len(left_list_) or right_coursor < len(right_list_):

        print('left_coursor=', left_coursor, 'len(left_list_)=', len(left_list_), 'right_coursor=', right_coursor, 'len(right_list_)=', len(right_list_))

        if left_list_[left_coursor] <= right_list_[right_coursor]:
            print('|    left_list_[left_coursor] <= right_list_[right_coursor]')
            sorted_list_.append(left_list_[left_coursor])
            left_coursor += 1
        else:
            print('|     else left_list_[left_coursor] <= right_list_[right_coursor]')

            sorted_list_.append(right_list_[right_coursor])
            right_coursor += 1
    return sorted_list_


def merge_sort(list_):
    lenth = len(list_)
    if lenth <= 1: # here we can add check if this list is sorted or any other "if"
        return list_

    mid = lenth // 2

    return merge(list_[:mid], list_[mid:])


print(merge_sort(qwe))





Создание новых пунктов в новом списке.
находилось в
.list_create_form
после кнопки

                <!--
                <p>
                    <!-- ng-repeat="point in pointsList0" -->

                    <ul class="list-group list-group-flush list_create_form">
                        <li class="list-group-item"
                            ng-repeat="point in pointsList[0]"
                            style="
                            <!--
                            margin-left:-15px;
                            margin-top:-10px;
                            margin-bottom:-10px;
                            -->
                            "
                        >
                            <i
                                class="material-icons"
                                style="
                                    border: 2px solid transparent;
                                    margin-left:-20px;
                                    margin-right:10px;
                                "
                            >
                                reorder
                            </i>
                            <!--
                            <label class="checkbox-inline" style="margin-top: -11px">
                                <input type="checkbox" id="inlineCheckbox1" value="option1"><span class="checkbox-decorator"><span class="check"></span><div class="ripple-container"></div></span>
                            </label>
                            -->
                            {{ point.title }}
                        </li>
                    </ul>
                    <!--
                    <input class="form-control"
                            type="text"
                            placeholder="New point"
                            ng-model='point_title_input[0][0]'
                            style="
                                width:300px;
                                display: inline-block;
                            "
                    >
                    <button class="btn btn-outline-secondary" type="button"
                            ng-click="editPoint(0, 0, 0, 'change_btn')"
                            style="
                            margin-bottom:2px;
                                height: 30px

                    ">
                        Add
                    </button>

                </p>
                -->
                <!--

                <button class="btn btn-outline-secondary" type="button">
                    Clear
                </button>

                <button
                        class="btn btn-outline-secondary"
                        type="button"
                        ng-click="editNote(0, 'is_list')"
                >
                    Create
                </button>
                -->


========================================================================
========================================================================
========================================================================


    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="navbar-brand float-left ">Navbar</div>
        <div>
            <button type="submit" class="btn btn-primary float-right"
                    style="display: inline-block;
                    {#margin-top: -36px; #}
                        margin-bottom: 0; margin-left: -15px;
                        height: 90px;
                        width: 50px;
                        float: right;
                    {#background-color: blue;#}
                    {#border:2px solid red#}
                ">
    {#            Sign up#}
    {#                S  <br>#}
    {#                I  <br>#}
    {#                G  <br>#}
    {#                N  <br>#}

    {#            <p style="transform: rotate(90deg); font-size: 19pt;#}
    {#                    margin-top: -5px;#}
    {#                    font-weight: 400">#}
    {#                SIGN#}
    {#            </p>#}
    {#            <br>#}
    {#            <p style="margin-top: -10px;#}
    {#                    font-weight: 600">#}
    {#                UP#}
    {#            </p>#}

                <p style="transform: rotate(90deg) scaleY(1.3);
                        {#font-size: 19pt;#}
                        font-size: 16pt;
                        margin-top: -5px;
                        font-weight: 400;">
                    SIGN
                </p>
                <br>

                <p style="
                        margin-left: -2px;
                        margin-top: -17px;
                        font-size: 13pt;
                        {#font-weight: 600#}
    ">
                    UP
                </p>

            </button>
                <form class="float-right"
                        style="width: 230px;display: inline-block;
                            {#background-color: blue;#}
                            {#height: 80px;#}
                            height: 90px;
                            float: right;
                        ">
                    <div class="form-group" style="display: block">
                        <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
                        <small id="emailHelp" class="form-text text-muted"
                                style="margin-top:0">
                            We'll never share your email.
                        </small>
                    </div>
                    <div class="form-group" style="display: block; margin-top: -15px">
                        <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
                    </div>
                </form>
                <button type="submit" class="btn btn-primary float-right"
                    style="
                        display: inline-block;
                    {#margin-top: -36px; #}
                        margin-bottom: 0;
                        margin-left: 5px;
                        height: 90px;
                        width: 50px;
                            float: right;
                    {#background-color: blue;#}
                    {#border:2px solid red#}
                ">
        {#            L <br>#}
        {#            o <br>#}
        {#            g <br>#}
        {#            i <br>#}
        {#            n <br>#}
        {#                <p style="  transform: rotate(90deg); font-size: 12pt; margin-top: -25px">#}
        {#                    L o g i n#}
        {#                </p>#}
                    <p style="
                            margin-top: -25px;
                            transform: rotate(90deg) scaleY(1.3);
                            font-size: 16pt;
                            font-weight: 400;
                    ">
                        LOGIN
                    </p>
        {#                <br>#}
        {#                <p style=" font-size: 14pt; margin-top: -15px">#}
        {#                    n#}
        {#                    LOGIN#}
        {#                </p>#}
        {#            <p style="  transform: rotate(90deg);font-size: 15pt">#}
        {#                В о й т и#}
        {#            </p>#}
                </button>


                <br>
                <br>

            </form>
        </div>
    </nav>



{% load static %}
<img src="{% static 'site/img/low-res.jpg' %}"
     srcset="{% static 'site/img/high-res.jpg' %} 2x"
     alt=""
/>

let html = `
<h1>Hello World!</h1>
<p>This is my first post</p>
`.trim()



curl -L -O  https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.0.0-darwin-x86_64.tar.gz
tar -xvf elasticsearch-7.0.0-darwin-x86_64.tar.gz
./elasticsearch-7.0.0/bin/elasticsearch



curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.7.1.tar.gz
tar -xvf elasticsearch-6.7.1.tar.gz
./elasticsearch-6.7.1/bin/elasticsearch



curl -L -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.16.tar.gz
tar -xvf elasticsearch-5.6.16.tar.gz
./elasticsearch-5.6.16/bin/elasticsearch
./manage.py search_index --rebuild






def asd():
    l1 = [2,4,3]
    l2 = [5,6,4]
    # num1 = l1[::1]
    num1 = int("".join(list(map(str, l1[::-1]))))
    # num2 = l2[::1]
    num2 = int("".join(list(map(str, l2[::-1]))))
    qwe = int(num1) + int(num2)
    return qwe


import itertools

import subprocess
subprocess.call('ulimit -v 12000', shell=True)

import resource
rsrc = resource.RLIMIT_DATA
resource.setrlimit(rsrc, (8, hard))
soft, hard = resource.getrlimit(rsrc)


num = 1000000

qwe = 0
t = time.time()
for i in range(num):
    qwe += i
tt = time.time() - t
print(tt)

qwe = 0
list_ = []
for n in range(num):
    list_.append(n)
t = time.time()
for index, iteger in enumerate(list_):
    qwe += iteger
tt = time.time() - t
print(tt)


haystack = "aaaaa"
needle = "bba"

import re
qwe = re.search(needle, haystack)
qwe.start()


nums = [0,0,1,1,1,2,2,3,3,4]

for index, n in enumerate(nums):
    print(index, n)
    if not index == 0:
        if n == nums[index - 1]:
            del nums[index - 1]
print(nums)



nums = [1,1,2]
index = 0
while nums[index]:
    if index:
        if n == nums[index - 1]:
            del nums[index - 1]
        else:
            index += 1
print(nums)







"""
Kusko, [8 февр. 2019 г., 12:19:30]:
            created_at=timestamp,
            datetime=date_time,
            action=action.id,
            user=30,
            device='qweasdqwe asd',
            application=action.application.id,
        )
    )
    print('time remain=', (1000000-i))
ClickhouseDatabase.insert(toons_of_actions)ц



from instat.models import *
action_stamps_internal = ActionStampInternal\
    .objects_in(ClickhouseDatabase)\
    .filter(
        application=6,
    )
for a in action_stamps_internal:
    print(' as=', a.datetime)


action=222,

./manage.py shell --settings=inservice.settings.development



`

Kusko, [8 февр. 2019 г., 12:19:51]:
`
class ActionStampCounterViewSet(AbstractPointCounterViewSet):
    This class counts actions from clickhouse adjusted period of time with appropriated detailing.
    Aggregation is list with all actions and its metadata in period between start & end.
    Results is list with all actions and its metadata  separated by relations to actions in period between start & end.


    def list(self, request, *args, **kwargs):
        data = self.form_data(request)
        return Response(data)

    def get_results(self, request):
        global_start = time.time()

        aggregated = {'data': []}
        results = []

        total_agrgated_values = []
        results_values = {}

        application = request.query_params.get('application')
        # print(application)
        actions = Action.objects.filter(application=application).values_list('pk', flat=True)
        actions_ids = tuple(map(int, actions))
        print(actions_ids)
        # print(len(actions_ids))
        qweqwe = ActionStampInternal \
            .objects_in(ClickhouseDatabase) \
            .filter(
                datetime__gte=dt.datetime.utcfromtimestamp(1514768460).replace(tzinfo=pytz.utc),
            ).count()
        print('qeqwe=', qweqwe)

        time_scale = self.form_time_scale(request)
        for ts in range(len(time_scale) - 1):

            # gmt = int(request.query_params.get('gmt'))
            # start_datetime = dt.datetime.utcfromtimestamp(int(time_scale[ts])).replace(tzinfo=pytz.utc) - dt.timedelta(minutes=gmt)
            # end_datetime = dt.datetime.utcfromtimestamp(int(time_scale[ts+1])).replace(tzinfo=pytz.utc) - dt.timedelta(minutes=gmt)

            start_datetime = dt.datetime.utcfromtimestamp(int(time_scale[ts])).replace(tzinfo=pytz.utc)
            end_datetime = dt.datetime.utcfromtimestamp(int(time_scale[ts+1])).replace(tzinfo=pytz.utc)



            action_stamps_internal_count = ActionStampInternal \
                .objects_in(ClickhouseDatabase) \
                .filter(
                    application=application,
                    datetime__gte=start_datetime,
                    datetime__lt=end_datetime
                ).count()

            total_agrgated_values.append(action_stamps_internal_count)

            inst_ts = self.make_inst(time_scale[ts], action_stamps_internal_count, aggregated['data'])
            aggregated['data'].append(inst_ts)

            action_stamps_internal = ActionStampInternal \
                .objects_in(ClickhouseDatabase) \
                .filter(
                    application=application,
                    datetime__gte=start_datetime,
                    datetime__lt=end_datetime
                ) \
                .only('action') \
                .aggregate(action='action', num='count()') \
                .group_by('action')

            # copy actionsRTRIM_ids to check if all actions are displayed in statistic (there are no records if nothing happend)
            check_actions_list = list(actions_ids)

            for action_stamp in action_stamps_internal:
                action_id = str(action_stamp.action)
                check_actions_list.remove(action_stamp.action)
                if action_id not in results_values:
                    results_values[action_id] = {
                        'id': action_id,
                        'data': [],
                        'total_results_values': [],
                    }

                action_stamp_quantity = action_stamp.num
                results_values[action_id]['total_results_values'].append(action_stamp_quantity)
                inst_ts = self.make_inst(time_scale[ts], action_stamp_quantity, results_values[action_id]['data'])
                results_values[action_id]['data'].append(inst_ts)

            # append all missed actions to statistic. This iteration may slow code.
            for action in check_actions_list:
                action_id = str(action)
                if action_id not in results_values:
                    results_values[action_id] = {
                        'id': action_id,

Kusko, [8 февр. 2019 г., 12:19:51]:
                        'data': [],
                        'total_results_values': [],
                    }

                action_stamp_quantity = 0
                results_values[action_id]['total_results_values'].append(action_stamp_quantity)
                inst_ts = self.make_inst(time_scale[ts], action_stamp_quantity, results_values[action_id]['data'])
                results_values[action_id]['data'].append(inst_ts)

        for action_id in actions_ids:
            action_id = str(action_id)

            self.form_metadata(results_values[action_id]['total_results_values'], results_values[action_id])
            del results_values[action_id]['total_results_values']
            results.append(results_values[action_id])


        self.form_metadata(total_agrgated_values, aggregated)
        print('time wasted=', (time.time()-global_start), 'sec')

        return [results, aggregated]
"""






import time
num = 1000000


def rty1():
    qwe = 0
    list_ = []
    for n in range(num):
        list_.append(n)
    print('for in (for iteger in list_)')
    t = time.time()
    for iteger in list_:
        qwe += iteger
    tt = time.time() - t
    print(tt)


def zxc1():
    qwe = 0
    list_ = []
    for n in range(num):
        list_.append(n)
    print('enumerate (for index, iteger in enumerate(list_)')
    t = time.time()
    for index, iteger in enumerate(list_):
        qwe += iteger
    tt = time.time() - t
    print(tt)


def asd1():
    qwe = 0
    print('range (for i in range(num)')
    t = time.time()
    for i in range(num):
        qwe += i
    tt = time.time() - t
    print(tt)


def fgh1():
    qwe = 0
    list_ = []
    for n in range(num):
        list_.append(n)
    print('while (while index < len(list_) - 1)')
    t = time.time()
    index = 0
    while index < len(list_) - 1:
        qwe += list_[index]
        index += 1
    tt = time.time() - t
    print(tt)


rty1()
zxc1()
asd1()
fgh1()


objects = ['d', 'ff', 'ggg', 'q', 'ww', 'ee']
objects = ['d', 'f', 'g', 'q', 'w', 'r']


def get_first_matching_object(predicate, objects_=list()):
    for obj in objects_:
        if predicate(obj):
            return obj
    return None


def asd(w):
    if len(w) == 2:
        return 1
    else:
        return 0


http://www.postgresqltutorial.com/postgresql-select/
https://andreyex.ru/bazy-dannyx/uchebnoe-posobie-po-sql/14-naibolee-chasto-ispolzuemyx-zaprosov-sql-vopros-otvet/
https://chartio.com/resources/tutorials/how-to-list-databases-and-tables-in-postgresql-using-psql/
http://www.postgresqltutorial.com/postgresql-create-table/
https://www.postgresql.org/docs/9.2/rowtypes.html
https://mode.com/blog/postgres-sql-date-functions


sudo su - postgres
psql
CREATE DATABASE qwe_db;
\q
psql qwe_db
psql
or \c qwe_db

CREATE TABLE mytable (
    name varchar(80)
)
\dt

INSERT INTO mytable (name) VALUES ('q'), ('w'), ('w'), ('w'), ('d'), ('v'), ('v'), ('f'),('d'), ('f');
# посчитать все одинаковые значения
SELECT name, COUNT(*) FROM mytable GROUP BY name;

SELECT name, COUNT(*) FROM information_schema.tables GROUP BY name;
SELECT * FROM information_schema.columns where table_schema = 'information_schema';
SELECT * FROM ONLY;

n = 1



information_schema.tables
information_schema.columns


# показать список всех баз данных
\list
                                     List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |      Access privileges
-----------+----------+----------+-------------+-------------+------------------------------
 list_db   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =Tc/postgres                +
           |          |          |             |             | postgres=CTc/postgres       +
           |          |          |             |             | list_alpha_user=CTc/postgres
 mydb      | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 qwe_db    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |sudo su - postgres

 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres                 +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres                 +
           |          |          |             |             | postgres=CTc/postgres



INSERT INTO Books VALUES(1001, 'Who will cry when you die', 299);





sudo su - postgres
psql
psql qwe_db
CREATE TABLE qwe_table (
 product varchar(80),
 updated TIMESTAMP,
 price integer
);
INSERT INTO qwe_table VALUES \
    ('яблоко', to_timestamp('16-05-2019 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 111),
    ('яблоко', to_timestamp('16-05-2018 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 222),
    ('яблоко', to_timestamp('16-05-2017 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 333),
    ('апельсин', to_timestamp('16-05-2015 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 123),
    ('манго', to_timestamp('16-05-2016 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 11),
    ('манго', to_timestamp('16-04-2019 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 22),
    ('манго', to_timestamp('16-03-2019 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 33),
    ('мандарин', to_timestamp('16-04-2019 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 666),
    ('маракуя', to_timestamp('16-05-2016 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 444)
;
INSERT INTO qwe_table VALUES \
    ('аквамирин', to_timestamp('01-01-2019 0:00:00', 'dd-mm-yyyy hh24:mi:ss'), 123),
    ('фейхуя', to_timestamp('16-05-2016 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 1),
    ('фейхуя', to_timestamp('16-04-2017 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 2),
    ('фейхуя', to_timestamp('16-04-2018 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 3),
    ('фейхуя', to_timestamp('16-03-2019 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 4)
;
INSERT INTO qwe_table VALUES ('яблоко', to_timestamp('16-05-2011 15:36:38', 'dd-mm-yyyy hh24:mi:ss'), 111);


INSERT INTO qwe_table
 (ts_column)
 VALUES
 (TIMESTAMP '2011-05-16 15:36:38');

http://www.postgresqltutorial.com/postgresql-insert/
https://stackoverflow.com/questions/43499317/select-only-the-rows-with-the-latest-date-in-postgres

SELECT * FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')

SELECT * FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') ORDER BY updated
SELECT * FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') ORDER BY updated LIMIT 1;

ORDER BY abs(session_date - date '$date_string')
LIMIT 1;




You do not need to create a bunch of views, just:

# просто берет первую попавшуюся запись
SELECT DISTINCT on(product) * FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') ORDER BY product;
SELECT DISTINCT on(product) * FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss');


#  упорядочит и и возьмет первую запись. В даном случае с самой большой датой но не больше 1 января 2019
SELECT DISTINCT ON (product) n1.* FROM (
    SELECT * FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') ORDER BY updated DESC
) n1;
SELECT DISTINCT ON (product) * FROM (
    SELECT * FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') ORDER BY updated DESC
) n1;





https://stackoverflow.com/questions/13325583/postgresql-max-and-group-by

# Выборка по максимальному полю
SELECT product, MAX(updated) FROM qwe_table GROUP BY product

#  упорядочит и и возьмет первую запись. В даном случае с самой большой датой но не больше 1 января 2019
SELECT t1.* FROM (
    SELECT product, MAX(updated) FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') GROUP BY product
) t1;
# или
SELECT * FROM (
    SELECT product, MAX(updated) FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') GROUP BY product
) t1;


SELECT updated FROM qwe_table LEFT JOIN updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss')




-----
=====







predicate(object) - что это вообще за запись? она багнется, если там вызывается функция, то следует записать predicate(obj)

(obj for obj in objects if predicate(object)) - нужно генерировать список:
[obj for obj in objects if predicate(object)]
или преобразовать matching_objects в список
matching_objects = list(matching_objects)

вроде лучше не не очень хорошая практика использовать названия аргументов и переменных, похожих на системные названия (objects и object). Но если очень сильно нужно - следует добавить нижнее подчеркивание в конце objects_ object_

Нет смысла продолжать итерацию, если мы уже нашли совпадение, так?

def get_first_matching_object(predicate, objects_=list()):
    for obj in objects_:
        if predicate(obj):
            return obj
    return None






Это вопрос с подвохом? вроде легко же считается
пусть таблица в дб называется mytable

SELECT name, COUNT(*) FROM qwe_table GROUP BY name;





Изучал запросы к бд больше года назад. Немного подзабыл как писать запросы :)
Пусть дата у нас хранится в виде timestamp

target_time = "2019-01-01 00:00:00"
time_format = "yyyy-mm-dd hh24:mi:ss"


Можно отсортировать по каким-нибудь показателям (в данном случае по времени обновления) и исключить все кроме первых попавшихся (ну первый будет максимальным)

SELECT DISTINCT ON (product) * FROM (
    SELECT * FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') ORDER BY updated DESC
) n1;

или сгруппировать по названию, отфильтровать все обновления после 1 января 2019 и взять значения с самым поздним временем обновления

SELECT * FROM (
    SELECT product, MAX(updated) FROM qwe_table WHERE updated < to_timestamp('2019-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss') GROUP BY product
) t1;




docker image prune -f


def heap_permutation(data, n):
    if n == 1:
        print(data)
        return
    for i in range(n):
        heap_permutation(data, n - 1)
        if n % 2 == 0:
            data[i], data[n-1] = data[n-1], data[i]
        else:
            data[0], data[n-1] = data[n-1], data[0]







create table price (
  product varchar(100),
  dt timestamp,
  price numeric,
  PRIMARY KEY (product, dt)
);

insert into price
values
('Air', date'2017-06-01', 100),
('Air', date'2017-06-02', 200),
('Air', date'2017-06-10', 1000),
('Sunlight', date'2017-06-02', 300),
('Sunlight', date'2017-06-05', 400)
;

select * from price;

select * distinct on (product) from price group by product


SELECT DISTINCT ON (product) * FROM (
    SELECT * FROM price WHERE dt < date'2017-06-06' ORDER BY dt DESC
) n1;








def heap_permutation(data, n):
    if n == 1:
        print(data)
        return
    for i in range(n):
        heap_permutation(data, n - 1)
        if n % 2 == 0:
            data[i], data[n-1] = data[n-1], data[i]
        else:
            data[0], data[n-1] = data[n-1], data[0]

data = [1, 2, 3]
heap_permutation(data, len(data))













'''
def time_this(original_function):
    def new_function(*args,**kwargs):
        import datetime
        before = datetime.datetime.now()
        x = original_function(*args,**kwargs)
        after = datetime.datetime.now()
        print("Elapsed Time = {0}".format(after-before))
        return x
    return new_function

@time_this
def func_a(stuff):
    import time
    print(time.sleep(3))

func_a(1)




def my_decorator(the_func):
    print('My decorator worked')
    return the_func

@my_decorator
def my_function(qwe):
    print('my_function worked', qwe)
    . . .
    return qwe

my_function(123)



def time_this_decorator(original_function):
    def new_function(*args,**kwargs):
        import datetime
        before = datetime.datetime.now()
        x = original_function(*args,**kwargs)
        print("Elapsed Time = {0}".format(datetime.datetime.now()-before))
        print('time_this_decorator')
        return x
    return new_function

@time_this_decorator
def func_a(stuff):
    import time
    print(time.sleep(3))
    print('func_a(stuff)', stuff)

func_a(1)



def time_this_decorator(original_function):
    import datetime
    before = datetime.datetime.now()

    def new_function(*args, **kwargs):
        x = original_function(*args,**kwargs)
        print("Elapsed Time = {0}".format(datetime.datetime.now()-before))
        return x

    return new_function

@time_this_decorator
def func_a(stuff):
    import time
    print(time.sleep(3))
    print('func_a(stuff)', stuff)

func_a(1)



def infinity_decorator(original_function):
    def new_function(*args, **kwargs):
        print("infinity_decorator")

        x = 1
        while x:
            try:
                return x
            except:
                pass
    return new_function

@time_this_decorator
def func_a(stuff):
    print('func_a', stuff)
    raise Exception('QWE')

func_a(1)

'''
import time


def my_deco(func):
    def wrapper(*args, **kwargs):

        x = 1
        while x:
            try:
                return func(*args, **kwargs)
            except Exception as e:
                pass

    return wrapper


@my_deco
def my_fucntion(qwe: any):
    import time
    print(time.sleep(3))
    print('my_fucntion', qwe)
    raise Exception('123')


my_fucntion(123)

import datetime
before = datetime.datetime.now()
print("Elapsed Time = {0}".format(datetime.datetime.now() - before))



def clean_json(value):
    if value:
        if isinstance(value, list):
            if not value[0]:
                del value[0]
            else:
                clean_json(value)
                return value
        if isinstance(value, dict):



[1, 2, 2, 2, 3, 3, 3, 4, 4, 5]

def most_common(lst):
    cur_length = 0
    max_length = 0
    cur_i = 0
    max_i = 0
    cur_item = None
    max_item = None

    for i in [1, 2, 2, 2, 3, 3, 3, 4, 4, 5]:
        if cur_item is None or cur_item != item:
            if cur_length > max_length or (cur_length == max_length and cur_i < max_i):
                max_length = cur_length
                max_i = cur_i
                max_item = cur_item
            cur_length = 1
            cur_i = i
            cur_item = item
        else:
            cur_length += 1
    if cur_length > max_length or (cur_length == max_length and cur_i < max_i):
        return cur_item
    return max_item








n = int(input())
a = [int(i) for i in input().split()]

a.sort()

print(a)

element = None
element_qty = 0
another_element_qty = 0
print('')
for i in a:
    print('i=', i)
    if element == i:
        print('if element != i  = ', element, i)
        another_element_qty += 1
    else:
        another_element_qty += 1

    if another_element_qty >= element_qty:
        element = i
        print('if another_element_qty > element_qty  =  ', element)
        element_qty = another_element_qty


    print('element_qty = ', element_qty, ' another_element_qty = ', another_element_qty)


print(element)


nums_dict = {}
qty = 0
number = ''
while i in reversed(a):
    nums_dict[i] = nums_dict.get(i, 0) + 1
    if nums_dict[i] >= qty:
        count = nums_dict[i]
        number = i
print(i)












number_qty = 0
number = ''

for i in a:
    another_element_qty = a.count(i)
    if another_element_qty >= qty:
        number = i
        qty = another_element_qty
print(number)


def most_frequent(List):
    return max(set(List), key = List.count)

List = [2, 1, 2, 2, 1, 3]
print(most_frequent(List))





    if element == a[cursor]:
        new_element_qty += 1
    else:
        new_element_qty = 1
    if new_element_qty >= element_qty:
        element = a[cursor]
        element_qty = new_element_qty

